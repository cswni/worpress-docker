{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Docker y WordPress Info Se recomienda tu propio port\u00e1til y con una distribuci\u00f3n GNU/Linux compatible con Docker : Ubuntu , Debian , Fedora o _CentOS. Warning Para evitar demoras innecesarias en el inicio de la actividad en clases es necesario traer ya de casa Docker instalado. Para ello lee el cap\u00edtulo de Instalaci\u00f3n .","title":"Home"},{"location":"containers/","text":"Contenedores \u00b6 Los contenedores son instancias de las im\u00e1genes que hemos creado o hemos descargado que se ejecutan de forma aislada. Listado \u00b6 La orden para ver el listado de contenedores del sistema es docker container ls o la forma abreviada docker ps . Si lo ejecutamos nos dar\u00e1 un listado vac\u00edo porque no hay ning\u00fan contenedor activo. Probemos con el par\u00e1metro --all o -a . $ docker container ls -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 4bd76e08b07f wordpress \"docker-\u2026\" 11 minutes ago Exited (0) peaceful_murdock 69a3c34c224d hello-world \"/hello\" 18 minutes ago Exited (0) blissful_goldwasser Estos contenedores est\u00e1n parados y se pueden volver a ejecutar, con el mismo estado que tuviera el sistema de archivos cuando se detuvieron. Ejecutar comandos dentro de un contenedor \u00b6 Ya hemos usado docker run para crear e iniciar un contenedor. Tambi\u00e9n podemos usar este comando para ejecutar programas que est\u00e9n dentro del contenedor. Por ejemplo: docker run --name ubuntu_bash --rm -i -t ubuntu bash Info Las primeras versiones de Docker eran m\u00e1s limitadas, respecto a la creaci\u00f3n de objetos. As\u00ed que sali\u00f3 con comandos como docker start , docker stop , etc. relacionados con los contenedores. Cuando surgieron m\u00e1s objetos no hab\u00eda consistencia entre los comandos de otros objetos (como docker volumes ls ) y los de los contenedores. As\u00ed que se ha creado una jerarqu\u00eda nueva de subcomandos bajo el comando container que son equivalentes y se mantienen por compatibilidad: Antiguo Nuevo docker run docker container run docker start docker container start docker stop docker container stop docker rm docker container rm docker inspect docker container inspect docker exec docker container exec No hay m\u00e1s diferencia entre ellos que el nombre. Pero esta forma de ejecutar cosas, crea un nuevo contenedor. Si queremos ejecutar un comando en un contenedor que ya est\u00e9 iniciado, debemos usar docker container exec . Ejecuta lo siguiente en otro terminal (no cierres el anterior). docker exec -w /tmp ubuntu_bash touch my_file.sh El par\u00e1metro -w indica el directorio de trabajo, despu\u00e9s indicamos el contenedor donde queremos ejecutar el comando ( ubuntu_bash ) y por \u00faltimo el comando a ejecutar ( touch my_file.sh ). Si en el primer terminal ejecutamos un listado del directorio tmp: # ls /tmp my_file.sh Vemos como podemos modificar un contenedor ya iniciado con docker container exec . Pulsa Control+C en el primer terminal para cerrar y borrar el contenedor. Iniciar un contenedor \u00b6 Con docker container start podemos iniciar un contenedor parado: $ docker container start peaceful_murdock peaceful_murdock $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 4bd76e08b07f wordpress \"docker\u2026\" 14 minutes ago Up 0.0.0.0:8080->80/tcp peaceful_murdock Veremos que la web de instalaci\u00f3n de WordPress est\u00e1 de nuevo disponible. Solo que ahora el contenedor se ejecuta en segundo plano y no lo podemos detener como antes. Detener un contenedor \u00b6 Con docker container stop podemos detener un contenedor iniciado, indicando su id o su nombre $ docker container stop 4bd76e08b07f 4bd76e08b07f Tip Podemos hacer referencia a los contenedores por su ID o por su nombre. Borrar un contenedor \u00b6 Un contenedor detenido ocupa espacio. Si hemos dejado de necesitar un contenedor podemos borrarlo con docker container rm . Igualmente hay que indicar id o nombre. $ docker container rm 4bd76e08b07f 4bd76e08b07f Danger Hay que tener cuidado al borrar contenedores. Cuando un contenedor se borra se elimina cualquier informaci\u00f3n que contenga y no est\u00e9 almacenada en alg\u00fan lugar externo al propio contenedor.","title":"Contenedores"},{"location":"containers/#contenedores","text":"Los contenedores son instancias de las im\u00e1genes que hemos creado o hemos descargado que se ejecutan de forma aislada.","title":"Contenedores"},{"location":"containers/#listado","text":"La orden para ver el listado de contenedores del sistema es docker container ls o la forma abreviada docker ps . Si lo ejecutamos nos dar\u00e1 un listado vac\u00edo porque no hay ning\u00fan contenedor activo. Probemos con el par\u00e1metro --all o -a . $ docker container ls -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 4bd76e08b07f wordpress \"docker-\u2026\" 11 minutes ago Exited (0) peaceful_murdock 69a3c34c224d hello-world \"/hello\" 18 minutes ago Exited (0) blissful_goldwasser Estos contenedores est\u00e1n parados y se pueden volver a ejecutar, con el mismo estado que tuviera el sistema de archivos cuando se detuvieron.","title":"Listado"},{"location":"containers/#ejecutar-comandos-dentro-de-un-contenedor","text":"Ya hemos usado docker run para crear e iniciar un contenedor. Tambi\u00e9n podemos usar este comando para ejecutar programas que est\u00e9n dentro del contenedor. Por ejemplo: docker run --name ubuntu_bash --rm -i -t ubuntu bash Info Las primeras versiones de Docker eran m\u00e1s limitadas, respecto a la creaci\u00f3n de objetos. As\u00ed que sali\u00f3 con comandos como docker start , docker stop , etc. relacionados con los contenedores. Cuando surgieron m\u00e1s objetos no hab\u00eda consistencia entre los comandos de otros objetos (como docker volumes ls ) y los de los contenedores. As\u00ed que se ha creado una jerarqu\u00eda nueva de subcomandos bajo el comando container que son equivalentes y se mantienen por compatibilidad: Antiguo Nuevo docker run docker container run docker start docker container start docker stop docker container stop docker rm docker container rm docker inspect docker container inspect docker exec docker container exec No hay m\u00e1s diferencia entre ellos que el nombre. Pero esta forma de ejecutar cosas, crea un nuevo contenedor. Si queremos ejecutar un comando en un contenedor que ya est\u00e9 iniciado, debemos usar docker container exec . Ejecuta lo siguiente en otro terminal (no cierres el anterior). docker exec -w /tmp ubuntu_bash touch my_file.sh El par\u00e1metro -w indica el directorio de trabajo, despu\u00e9s indicamos el contenedor donde queremos ejecutar el comando ( ubuntu_bash ) y por \u00faltimo el comando a ejecutar ( touch my_file.sh ). Si en el primer terminal ejecutamos un listado del directorio tmp: # ls /tmp my_file.sh Vemos como podemos modificar un contenedor ya iniciado con docker container exec . Pulsa Control+C en el primer terminal para cerrar y borrar el contenedor.","title":"Ejecutar comandos dentro de un contenedor"},{"location":"containers/#iniciar-un-contenedor","text":"Con docker container start podemos iniciar un contenedor parado: $ docker container start peaceful_murdock peaceful_murdock $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 4bd76e08b07f wordpress \"docker\u2026\" 14 minutes ago Up 0.0.0.0:8080->80/tcp peaceful_murdock Veremos que la web de instalaci\u00f3n de WordPress est\u00e1 de nuevo disponible. Solo que ahora el contenedor se ejecuta en segundo plano y no lo podemos detener como antes.","title":"Iniciar un contenedor"},{"location":"containers/#detener-un-contenedor","text":"Con docker container stop podemos detener un contenedor iniciado, indicando su id o su nombre $ docker container stop 4bd76e08b07f 4bd76e08b07f Tip Podemos hacer referencia a los contenedores por su ID o por su nombre.","title":"Detener un contenedor"},{"location":"containers/#borrar-un-contenedor","text":"Un contenedor detenido ocupa espacio. Si hemos dejado de necesitar un contenedor podemos borrarlo con docker container rm . Igualmente hay que indicar id o nombre. $ docker container rm 4bd76e08b07f 4bd76e08b07f Danger Hay que tener cuidado al borrar contenedores. Cuando un contenedor se borra se elimina cualquier informaci\u00f3n que contenga y no est\u00e9 almacenada en alg\u00fan lugar externo al propio contenedor.","title":"Borrar un contenedor"},{"location":"data/","text":"Persistiendo datos \u00b6 Por defecto ya hemos indicado que un contenedor est\u00e1 aislado de todo. Hemos visto como podemos conectar el contenedor a un puerto de red para poder acceder a \u00e9l. Eso incluye al sistema de archivos que contiene. De tal manera que si se elimina el contenedor, se eliminan tambi\u00e9n sus archivos. Si queremos almacenar datos (una web, una base de datos, etc.) dentro de un contenedor necesitamos una manera de almacenarlos sin perderlos. Docker ofrece tres maneras: A trav\u00e9s de vol\u00famenes, que son objetos de Docker como las im\u00e1genes y los contenedores. Montando un directorio de la m\u00e1quina anfitri\u00f3n dentro del contenedor. Almacen\u00e1ndolo en la memoria del sistema (aunque tambi\u00e9n se perder\u00edan al reiniciar el servidor). Lo normal es usar vol\u00famenes, pero habr\u00e1 ocasiones en que es preferible montar directamente un directorio de nuestro espacio de trabajo. Por ejemplo, para guardar los datos de una base de datos usaremos vol\u00famenes, pero para guardar el c\u00f3digo de una aplicaci\u00f3n o de una p\u00e1gina web montaremos el directorio. La raz\u00f3n para esto \u00faltimo es que tanto nuestro entorno de desarrollo como el contenedor tengan acceso a los archivos del c\u00f3digo fuente. Los vol\u00famenes, al contrario que los directorios montados, no deben accederse desde la m\u00e1quina anfitri\u00f3n. Crear un volumen \u00b6 Como necesitamos crear una base de datos para nuestro blog con WordPress vamos a crear un volumen donde guardar la informaci\u00f3n: $ docker volume create wordpress-db wordpress-db Listar vol\u00famenes \u00b6 Con docker volume ls podemos visualizar todos los volumenes disponibles. $ docker volume ls DRIVER VOLUME NAME local wordpress-db Visualizar vol\u00famenes \u00b6 Los volumenes se crean en un directorio del sistema y no es recomendable acceder a \u00e9l, no al menos mientras haya un contenedor us\u00e1ndolo. En cualquier caso, si queremos ver los metadatos de un volumen podemos usar docker volume inspect $ docker volume inspect wordpress-db [ { \"CreatedAt\": \"yyyy-mm-ddThh:ii:ss+Z\", \"Driver\": \"local\", \"Labels\": {}, \"Mountpoint\": \"/var/lib/docker/volumes/wordpress-db/_data\", \"Name\": \"wordpress-db\", \"Options\": {}, \"Scope\": \"local\" } ] Borrar volumenes \u00b6 Como todos los objetos de Docker , los vol\u00famenes tambi\u00e9n pueden ser borrados, pero solo si no est\u00e1n en uso. Mucha precauci\u00f3n al borrar los vol\u00famenes, porque perder\u00edamos todos los datos que contenga. Para borrar un contenedor usaremos docker volume rm y el nombre del contenedor.","title":"Persistiendo datos"},{"location":"data/#persistiendo-datos","text":"Por defecto ya hemos indicado que un contenedor est\u00e1 aislado de todo. Hemos visto como podemos conectar el contenedor a un puerto de red para poder acceder a \u00e9l. Eso incluye al sistema de archivos que contiene. De tal manera que si se elimina el contenedor, se eliminan tambi\u00e9n sus archivos. Si queremos almacenar datos (una web, una base de datos, etc.) dentro de un contenedor necesitamos una manera de almacenarlos sin perderlos. Docker ofrece tres maneras: A trav\u00e9s de vol\u00famenes, que son objetos de Docker como las im\u00e1genes y los contenedores. Montando un directorio de la m\u00e1quina anfitri\u00f3n dentro del contenedor. Almacen\u00e1ndolo en la memoria del sistema (aunque tambi\u00e9n se perder\u00edan al reiniciar el servidor). Lo normal es usar vol\u00famenes, pero habr\u00e1 ocasiones en que es preferible montar directamente un directorio de nuestro espacio de trabajo. Por ejemplo, para guardar los datos de una base de datos usaremos vol\u00famenes, pero para guardar el c\u00f3digo de una aplicaci\u00f3n o de una p\u00e1gina web montaremos el directorio. La raz\u00f3n para esto \u00faltimo es que tanto nuestro entorno de desarrollo como el contenedor tengan acceso a los archivos del c\u00f3digo fuente. Los vol\u00famenes, al contrario que los directorios montados, no deben accederse desde la m\u00e1quina anfitri\u00f3n.","title":"Persistiendo datos"},{"location":"data/#crear-un-volumen","text":"Como necesitamos crear una base de datos para nuestro blog con WordPress vamos a crear un volumen donde guardar la informaci\u00f3n: $ docker volume create wordpress-db wordpress-db","title":"Crear un volumen"},{"location":"data/#listar-volumenes","text":"Con docker volume ls podemos visualizar todos los volumenes disponibles. $ docker volume ls DRIVER VOLUME NAME local wordpress-db","title":"Listar vol\u00famenes"},{"location":"data/#visualizar-volumenes","text":"Los volumenes se crean en un directorio del sistema y no es recomendable acceder a \u00e9l, no al menos mientras haya un contenedor us\u00e1ndolo. En cualquier caso, si queremos ver los metadatos de un volumen podemos usar docker volume inspect $ docker volume inspect wordpress-db [ { \"CreatedAt\": \"yyyy-mm-ddThh:ii:ss+Z\", \"Driver\": \"local\", \"Labels\": {}, \"Mountpoint\": \"/var/lib/docker/volumes/wordpress-db/_data\", \"Name\": \"wordpress-db\", \"Options\": {}, \"Scope\": \"local\" } ]","title":"Visualizar vol\u00famenes"},{"location":"data/#borrar-volumenes","text":"Como todos los objetos de Docker , los vol\u00famenes tambi\u00e9n pueden ser borrados, pero solo si no est\u00e1n en uso. Mucha precauci\u00f3n al borrar los vol\u00famenes, porque perder\u00edamos todos los datos que contenga. Para borrar un contenedor usaremos docker volume rm y el nombre del contenedor.","title":"Borrar volumenes"},{"location":"installation/","text":"Instalaci\u00f3n \u00b6 Existe dos versiones de Docker, una libre y otra que no lo es. Nos ocuparemos exclusivamente de la primera: Docker CE (Community Edition) . Disponibilidad \u00b6 Docker CE est\u00e1 disponible para los siguientes sistemas GNU/Linux: CentOS, Debian, Fedora y Ubuntu. No todas est\u00e1n en m\u00faltiples arquitecturas, pero s\u00ed todas soportan x86_64/amd64 . Si tienes otra arquitectura u otro sistema es mejor que uses una m\u00e1quina virtual para arrancar una distribuci\u00f3n compatible. Para m\u00e1s informaci\u00f3n sobre sistemas privativos soportados, leer la secci\u00f3n de plataformas soportadas de la documentaci\u00f3n oficial. Instalaci\u00f3n \u00b6 Debido a que, dependiendo de la distribuci\u00f3n, la forma de instalarlo difiere, es mejor consultar la documentaci\u00f3n oficial para saber como instalar Docker en tu m\u00e1quina. Ubuntu: https://docs.docker.com/install/linux/docker-ce/ubuntu/ Debian: https://docs.docker.com/install/linux/docker-ce/debian/ CentOS: https://docs.docker.com/install/linux/docker-ce/centos/ Fedora: https://docs.docker.com/install/linux/docker-ce/fedora/ Si quieres instalar y probar Linux por primera vez, te recomendamos que uses una versi\u00f3n LTS de Ubuntu , por ser f\u00e1cil de instalar y tener un ciclo de mantenimiento de seguridad ampliado. Obviamente necesitas tener conexi\u00f3n a Internet para instalar y probar Docker. Para saber si tienes Docker bien instalado, los tutoriales oficiales siempre te indican inicies un contenedor de ejemplo. Esto es lo que sucede: Example Los c\u00f3digos de ejemplo ir\u00e1n acompa\u00f1ados de una caja como esta para poder copiar y pegar los comandos. sudo docker run hello-world El resultado es el siguiente: $ sudo docker run hello-world Unable to find image 'hello-world:latest' locally latest: Pulling from library/hello-world d1725b59e92d: Pull complete Digest: sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788 Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1 . The Docker client contacted the Docker daemon. 2 . The Docker daemon pulled the \"hello-world\" image from the Docker Hub. ( amd64 ) 3 . The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4 . The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/get-started/ En la l\u00ednea 1 estamos ejecutando el cliente de Docker, y estamos indicando que queremos ejecutar un contenedor a partir de la imagen hello-world del registro p\u00fablico de Docker. Si es la primera vez que hemos ejecutado esa imagen, nos aparecer\u00e1 la l\u00ednea 2, que indica que la imagen no puede ser encontrada y va a proceder a buscarla, por defecto, en el registro p\u00fablico. Si tenemos conexi\u00f3n a Internet se descargar\u00e1 la imagen (l\u00ednea 6) y autom\u00e1ticamente crear\u00e1 un contenedor. Tanto si se ha descargado la imagen o ya estaba descargada, el contenedor se ejecutar\u00e1, obteniendo el texto de bienvenida que se ve en el cuadro anterior. Configuraci\u00f3n del usuario \u00b6 Si estamos usando Docker en nuestro ordenador personal, podemos configurar nuestro usuario para usar el cliente sin tener que poner sudo delante. Para ello ejecuta lo siguiente: Example A\u00f1ade tu usuario al grupo de docker. sudo usermod -aG docker $USER Para que los nuevos permisos surtan efecto, debes cerrar y volver a abrir la sesi\u00f3n. Para problemas relacionados con los permisos visitad la p\u00e1gina del manual oficial . Requisitos del curso \u00b6 Im\u00e1genes \u00b6 Es necesario traer ya instaladas ciertas im\u00e1genes de contenedores. Ejecuta los siguientes comandos en tu equipo (si te da error de permisos aseg\u00farate que has hecho el apartado anterior y abierto y cerrado la sesi\u00f3n). Example Instalar WordPress : docker pull wordpress:latest Example Instalar MariaDB : docker pull mariadb:latest Herramientas \u00b6 Tambi\u00e9n es necesario traer una herramienta llamada Docker Compose . Puedes instalarla con las instrucciones que hay en la p\u00e1gina de Instalaci\u00f3n de Docker Compose . Sin embargo, si usas Ubuntu o Debian puedes instalarlo de forma m\u00e1s f\u00e1cil con apt : Example Instalaci\u00f3n de Docker Compose : sudo apt install docker-compose","title":"Instalaci\u00f3n"},{"location":"installation/#instalacion","text":"Existe dos versiones de Docker, una libre y otra que no lo es. Nos ocuparemos exclusivamente de la primera: Docker CE (Community Edition) .","title":"Instalaci\u00f3n"},{"location":"installation/#disponibilidad","text":"Docker CE est\u00e1 disponible para los siguientes sistemas GNU/Linux: CentOS, Debian, Fedora y Ubuntu. No todas est\u00e1n en m\u00faltiples arquitecturas, pero s\u00ed todas soportan x86_64/amd64 . Si tienes otra arquitectura u otro sistema es mejor que uses una m\u00e1quina virtual para arrancar una distribuci\u00f3n compatible. Para m\u00e1s informaci\u00f3n sobre sistemas privativos soportados, leer la secci\u00f3n de plataformas soportadas de la documentaci\u00f3n oficial.","title":"Disponibilidad"},{"location":"installation/#instalacion_1","text":"Debido a que, dependiendo de la distribuci\u00f3n, la forma de instalarlo difiere, es mejor consultar la documentaci\u00f3n oficial para saber como instalar Docker en tu m\u00e1quina. Ubuntu: https://docs.docker.com/install/linux/docker-ce/ubuntu/ Debian: https://docs.docker.com/install/linux/docker-ce/debian/ CentOS: https://docs.docker.com/install/linux/docker-ce/centos/ Fedora: https://docs.docker.com/install/linux/docker-ce/fedora/ Si quieres instalar y probar Linux por primera vez, te recomendamos que uses una versi\u00f3n LTS de Ubuntu , por ser f\u00e1cil de instalar y tener un ciclo de mantenimiento de seguridad ampliado. Obviamente necesitas tener conexi\u00f3n a Internet para instalar y probar Docker. Para saber si tienes Docker bien instalado, los tutoriales oficiales siempre te indican inicies un contenedor de ejemplo. Esto es lo que sucede: Example Los c\u00f3digos de ejemplo ir\u00e1n acompa\u00f1ados de una caja como esta para poder copiar y pegar los comandos. sudo docker run hello-world El resultado es el siguiente: $ sudo docker run hello-world Unable to find image 'hello-world:latest' locally latest: Pulling from library/hello-world d1725b59e92d: Pull complete Digest: sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788 Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1 . The Docker client contacted the Docker daemon. 2 . The Docker daemon pulled the \"hello-world\" image from the Docker Hub. ( amd64 ) 3 . The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4 . The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/get-started/ En la l\u00ednea 1 estamos ejecutando el cliente de Docker, y estamos indicando que queremos ejecutar un contenedor a partir de la imagen hello-world del registro p\u00fablico de Docker. Si es la primera vez que hemos ejecutado esa imagen, nos aparecer\u00e1 la l\u00ednea 2, que indica que la imagen no puede ser encontrada y va a proceder a buscarla, por defecto, en el registro p\u00fablico. Si tenemos conexi\u00f3n a Internet se descargar\u00e1 la imagen (l\u00ednea 6) y autom\u00e1ticamente crear\u00e1 un contenedor. Tanto si se ha descargado la imagen o ya estaba descargada, el contenedor se ejecutar\u00e1, obteniendo el texto de bienvenida que se ve en el cuadro anterior.","title":"Instalaci\u00f3n"},{"location":"installation/#configuracion-del-usuario","text":"Si estamos usando Docker en nuestro ordenador personal, podemos configurar nuestro usuario para usar el cliente sin tener que poner sudo delante. Para ello ejecuta lo siguiente: Example A\u00f1ade tu usuario al grupo de docker. sudo usermod -aG docker $USER Para que los nuevos permisos surtan efecto, debes cerrar y volver a abrir la sesi\u00f3n. Para problemas relacionados con los permisos visitad la p\u00e1gina del manual oficial .","title":"Configuraci\u00f3n del usuario"},{"location":"installation/#requisitos-del-curso","text":"","title":"Requisitos del curso"},{"location":"installation/#imagenes","text":"Es necesario traer ya instaladas ciertas im\u00e1genes de contenedores. Ejecuta los siguientes comandos en tu equipo (si te da error de permisos aseg\u00farate que has hecho el apartado anterior y abierto y cerrado la sesi\u00f3n). Example Instalar WordPress : docker pull wordpress:latest Example Instalar MariaDB : docker pull mariadb:latest","title":"Im\u00e1genes"},{"location":"installation/#herramientas","text":"Tambi\u00e9n es necesario traer una herramienta llamada Docker Compose . Puedes instalarla con las instrucciones que hay en la p\u00e1gina de Instalaci\u00f3n de Docker Compose . Sin embargo, si usas Ubuntu o Debian puedes instalarlo de forma m\u00e1s f\u00e1cil con apt : Example Instalaci\u00f3n de Docker Compose : sudo apt install docker-compose","title":"Herramientas"},{"location":"introduction/","text":"Introducci\u00f3n \u00b6 Seg\u00fan la Wikipedia: \"Docker es un proyecto de c\u00f3digo abierto que automatiza el despliegue de aplicaciones dentro de contenedores de software, proporcionando una capa adicional de abstracci\u00f3n y automatizaci\u00f3n de virtualizaci\u00f3n de aplicaciones en m\u00faltiples sistemas operativos. Docker utiliza caracter\u00edsticas de aislamiento de recursos del kernel Linux, tales como cgroups y espacios de nombres (namespaces) para permitir que 'contenedores' independientes se ejecuten dentro de una sola instancia de Linux, evitando la sobrecarga de iniciar y mantener m\u00e1quinas virtuales.\" 1 . Esto es una descripci\u00f3n formal, pero para enterarte de qu\u00e9 es docker sigue leyendo: \u00bfA qui\u00e9n le puede interesar usar docker? \u00b6 Docker es \u00fatil a administradores de sistemas, pero tambi\u00e9n a desarrolladores. Uno de los problemas que se presentan durante el desarrollo y despliegue de aplicaciones es encontrarnos con sistemas heterog\u00e9neos, no ya entre los desarrolladores, tambi\u00e9n entre los sistemas de pruebas, pre-producci\u00f3n y producci\u00f3n. Es decir, que los desarrolladores y los sistemas donde se ejecuta la aplicaci\u00f3n tienen librer\u00edas y sistemas operativos diferentes. \u00bfY por qu\u00e9 es un problema? Pues porque la aplicaci\u00f3n puede funcionar bien en una distribuci\u00f3n de GNU/Linux pero no bien en otra, o ejecutarse bien con la versi\u00f3n de un lenguaje pero no con otra. Para asegurar la calidad de desarrollo tenemos que asegurar que todo el mundo usa las mismas versiones de todas las aplicaciones y librer\u00edas necesarios. Esto es m\u00e1s complicado de lo que parece, porque hay desarrolladores que prefieron una distribuci\u00f3n concreta, o incluso sistemas privativos. Incluso los sistemas de pruebas, pre-producci\u00f3n y producci\u00f3n suelen ser distintos. Los sistemas de producci\u00f3n suelen ser m\u00e1s nuevos y potentes y los antiguos se dejan para pruebas y pre-producci\u00f3n. Otro problema es que un mismo desarrollador o un mismo sistema de despliegue tenga que trabajar en m\u00e1s de un proyecto que requiera versiones distintas de librer\u00edas, complic\u00e1ndolo a\u00fan m\u00e1s. Docker viene a solucionar todos estos problemas, tanto para los desarrolladores como para los administradores de sistemas. Con Docker podemos crear entornos aislados con configuraciones que ser\u00e1n exactamente igual siempre. \u00bfDocker es virtualizaci\u00f3n? \u00b6 En GNU/Linux Docker no es virtualizado, no hay un hipervisor. Los procesos que corren dentro de un contenedor de docker se ejecutan con el mismo kernel que la m\u00e1quina anfitri\u00f3n. Linux lo que hace es aislar esos procesos del resto de procesos del sistema, ya sean los propios de la m\u00e1quina anfitri\u00f3n o procesos de otros contenedores. Adem\u00e1s, es capaz de controlar los recursos que se le asignan a esos contenedores (cpu, memoria, red, etc.). Internamente, el contenedor no sabe que lo es y a todos los efectos es una distribuci\u00f3n GNU/Linux independiente, pero sin la penalizaci\u00f3n de rendimiento que tienen los sistemas virtualizados. As\u00ed que, cuando ejecutamos un contenedor, estamos ejecutando un servicio dentro de una distribuci\u00f3n construida a partir de una \"receta\". Esa receta permite que el sistema que se ejecuta sea siempre el mismo, independientemente de si estamos usando Docker en Ubuntu, Fedora o, incluso, sistemas privativos compatibles con Docker. De esa manera podemos garantizar que estamos desarrollando o desplegando nuestra aplicaci\u00f3n, siempre con la misma versi\u00f3n de todas las dependencias. Obviamente, si ejecutamos contenedores GNU/Linux dentro de sistemas privativos, s\u00ed habr\u00e1 virtualizaci\u00f3n. Conceptos b\u00e1sicos \u00b6 Antes de comenzar a instalar y usar docker es importante tener una serie de conceptos claros 2 : Demonio de docker (docker daemon) Es el proceso principal de docker. Escucha peticiones a la API y maneja los objetos de docker: im\u00e1genes, contenedores, redes, vol\u00famenes. Tambi\u00e9n es capaz de comunicarse con otros demonios para controlar servicios docker. Cliente de docker (docker client) Es la principal herramienta que usan los administradores de sistema para interaccionar con el sistema Docker. Registro de docker (docker registry) Es el lugar donde se almacenan las im\u00e1genes de Docker y poder descargarlas para reutilizarlas. Docker Hub es el principal registro p\u00fablico de Docker y contiene ya un mont\u00f3n de im\u00e1genes listas para ser usadas de multitud de servicios (mysql, wordpress, etc). Objetos de docker \u00b6 Cuando usamos Docker, estamos creando y usando im\u00e1genes, contenedores, redes o vol\u00famenes, entre otros. A todo esto se le denominan objetos. Veamos los m\u00e1s importantes: Imagen (image) Plantilla de solo lectura que contiene las instrucciones para crear un contenedor Docker. Pueden estar basadas en otras imagenes, lo cual es habitual. Contenedor (container) Es una instancia ejecutable de una imagen. Esta instancia puede ser creada, iniciada, detenida, movida o eliminada a trav\u00e9s del cliente de Docker o de la API. Las instancias se pueden conectar a una o m\u00e1s redes, sistemas de almacenamiento, o incluso se puede crear una imagen a partir del estado de un contenedor. Se puede controlar c\u00f3mo de aislado est\u00e1 el contenedor del sistema anfitri\u00f3n y del resto de contenedores. El contenedor est\u00e1 definido tanto por la imagen de la que procede como de las opciones de configuraci\u00f3n que permita. Por ejemplo, la imagen oficial de MariaDb permite configurar a trav\u00e9s de opciones la contrase\u00f1a del administrador, de la primera base de datos que se cree, del usuario que la maneja, etc. Servicios (services) Los servicios permiten escalar contenedor a trav\u00e9s de m\u00faltiples demonios de Docker, los cuales trabajar\u00e1n conjuntamente como un enjambre (swarm). Objetivos del taller de Docker y Wordpress \u00b6 En este taller aprenderemos: A usar el registro oficial de Docker, a descargar y usar im\u00e1genes del mismo creando contenedores que nos puedan ser \u00fatiles. A crear una imagen a partir de otra. A automatizar la creaci\u00f3n de un conjunto de contenedores que interaccionan entre s\u00ed. En este taller no aprenderemos: A crear un cluster con Docker (Docker Swarm). A administrar sistemas. Se dar\u00e1n ya las instrucciones necesarias para crear servicios pero explicarlos est\u00e1 m\u00e1s alla del \u00e1mbito de este taller. Wikipedia: https://es.wikipedia.org/wiki/Docker_(software) \u21a9 Official Docker Documentation: Docker overview . \u21a9","title":"Introducci\u00f3n"},{"location":"introduction/#introduccion","text":"Seg\u00fan la Wikipedia: \"Docker es un proyecto de c\u00f3digo abierto que automatiza el despliegue de aplicaciones dentro de contenedores de software, proporcionando una capa adicional de abstracci\u00f3n y automatizaci\u00f3n de virtualizaci\u00f3n de aplicaciones en m\u00faltiples sistemas operativos. Docker utiliza caracter\u00edsticas de aislamiento de recursos del kernel Linux, tales como cgroups y espacios de nombres (namespaces) para permitir que 'contenedores' independientes se ejecuten dentro de una sola instancia de Linux, evitando la sobrecarga de iniciar y mantener m\u00e1quinas virtuales.\" 1 . Esto es una descripci\u00f3n formal, pero para enterarte de qu\u00e9 es docker sigue leyendo:","title":"Introducci\u00f3n"},{"location":"introduction/#a-quien-le-puede-interesar-usar-docker","text":"Docker es \u00fatil a administradores de sistemas, pero tambi\u00e9n a desarrolladores. Uno de los problemas que se presentan durante el desarrollo y despliegue de aplicaciones es encontrarnos con sistemas heterog\u00e9neos, no ya entre los desarrolladores, tambi\u00e9n entre los sistemas de pruebas, pre-producci\u00f3n y producci\u00f3n. Es decir, que los desarrolladores y los sistemas donde se ejecuta la aplicaci\u00f3n tienen librer\u00edas y sistemas operativos diferentes. \u00bfY por qu\u00e9 es un problema? Pues porque la aplicaci\u00f3n puede funcionar bien en una distribuci\u00f3n de GNU/Linux pero no bien en otra, o ejecutarse bien con la versi\u00f3n de un lenguaje pero no con otra. Para asegurar la calidad de desarrollo tenemos que asegurar que todo el mundo usa las mismas versiones de todas las aplicaciones y librer\u00edas necesarios. Esto es m\u00e1s complicado de lo que parece, porque hay desarrolladores que prefieron una distribuci\u00f3n concreta, o incluso sistemas privativos. Incluso los sistemas de pruebas, pre-producci\u00f3n y producci\u00f3n suelen ser distintos. Los sistemas de producci\u00f3n suelen ser m\u00e1s nuevos y potentes y los antiguos se dejan para pruebas y pre-producci\u00f3n. Otro problema es que un mismo desarrollador o un mismo sistema de despliegue tenga que trabajar en m\u00e1s de un proyecto que requiera versiones distintas de librer\u00edas, complic\u00e1ndolo a\u00fan m\u00e1s. Docker viene a solucionar todos estos problemas, tanto para los desarrolladores como para los administradores de sistemas. Con Docker podemos crear entornos aislados con configuraciones que ser\u00e1n exactamente igual siempre.","title":"\u00bfA qui\u00e9n le puede interesar usar docker?"},{"location":"introduction/#docker-es-virtualizacion","text":"En GNU/Linux Docker no es virtualizado, no hay un hipervisor. Los procesos que corren dentro de un contenedor de docker se ejecutan con el mismo kernel que la m\u00e1quina anfitri\u00f3n. Linux lo que hace es aislar esos procesos del resto de procesos del sistema, ya sean los propios de la m\u00e1quina anfitri\u00f3n o procesos de otros contenedores. Adem\u00e1s, es capaz de controlar los recursos que se le asignan a esos contenedores (cpu, memoria, red, etc.). Internamente, el contenedor no sabe que lo es y a todos los efectos es una distribuci\u00f3n GNU/Linux independiente, pero sin la penalizaci\u00f3n de rendimiento que tienen los sistemas virtualizados. As\u00ed que, cuando ejecutamos un contenedor, estamos ejecutando un servicio dentro de una distribuci\u00f3n construida a partir de una \"receta\". Esa receta permite que el sistema que se ejecuta sea siempre el mismo, independientemente de si estamos usando Docker en Ubuntu, Fedora o, incluso, sistemas privativos compatibles con Docker. De esa manera podemos garantizar que estamos desarrollando o desplegando nuestra aplicaci\u00f3n, siempre con la misma versi\u00f3n de todas las dependencias. Obviamente, si ejecutamos contenedores GNU/Linux dentro de sistemas privativos, s\u00ed habr\u00e1 virtualizaci\u00f3n.","title":"\u00bfDocker es virtualizaci\u00f3n?"},{"location":"introduction/#conceptos-basicos","text":"Antes de comenzar a instalar y usar docker es importante tener una serie de conceptos claros 2 : Demonio de docker (docker daemon) Es el proceso principal de docker. Escucha peticiones a la API y maneja los objetos de docker: im\u00e1genes, contenedores, redes, vol\u00famenes. Tambi\u00e9n es capaz de comunicarse con otros demonios para controlar servicios docker. Cliente de docker (docker client) Es la principal herramienta que usan los administradores de sistema para interaccionar con el sistema Docker. Registro de docker (docker registry) Es el lugar donde se almacenan las im\u00e1genes de Docker y poder descargarlas para reutilizarlas. Docker Hub es el principal registro p\u00fablico de Docker y contiene ya un mont\u00f3n de im\u00e1genes listas para ser usadas de multitud de servicios (mysql, wordpress, etc).","title":"Conceptos b\u00e1sicos"},{"location":"introduction/#objetos-de-docker","text":"Cuando usamos Docker, estamos creando y usando im\u00e1genes, contenedores, redes o vol\u00famenes, entre otros. A todo esto se le denominan objetos. Veamos los m\u00e1s importantes: Imagen (image) Plantilla de solo lectura que contiene las instrucciones para crear un contenedor Docker. Pueden estar basadas en otras imagenes, lo cual es habitual. Contenedor (container) Es una instancia ejecutable de una imagen. Esta instancia puede ser creada, iniciada, detenida, movida o eliminada a trav\u00e9s del cliente de Docker o de la API. Las instancias se pueden conectar a una o m\u00e1s redes, sistemas de almacenamiento, o incluso se puede crear una imagen a partir del estado de un contenedor. Se puede controlar c\u00f3mo de aislado est\u00e1 el contenedor del sistema anfitri\u00f3n y del resto de contenedores. El contenedor est\u00e1 definido tanto por la imagen de la que procede como de las opciones de configuraci\u00f3n que permita. Por ejemplo, la imagen oficial de MariaDb permite configurar a trav\u00e9s de opciones la contrase\u00f1a del administrador, de la primera base de datos que se cree, del usuario que la maneja, etc. Servicios (services) Los servicios permiten escalar contenedor a trav\u00e9s de m\u00faltiples demonios de Docker, los cuales trabajar\u00e1n conjuntamente como un enjambre (swarm).","title":"Objetos de docker"},{"location":"introduction/#objetivos-del-taller-de-docker-y-wordpress","text":"En este taller aprenderemos: A usar el registro oficial de Docker, a descargar y usar im\u00e1genes del mismo creando contenedores que nos puedan ser \u00fatiles. A crear una imagen a partir de otra. A automatizar la creaci\u00f3n de un conjunto de contenedores que interaccionan entre s\u00ed. En este taller no aprenderemos: A crear un cluster con Docker (Docker Swarm). A administrar sistemas. Se dar\u00e1n ya las instrucciones necesarias para crear servicios pero explicarlos est\u00e1 m\u00e1s alla del \u00e1mbito de este taller. Wikipedia: https://es.wikipedia.org/wiki/Docker_(software) \u21a9 Official Docker Documentation: Docker overview . \u21a9","title":"Objetivos del taller de Docker y Wordpress"},{"location":"tips/","text":"Trucos \u00b6 Portainer \u00b6 Portainer es una gestor de contenedores a trav\u00e9s de una interfaz web. Para usarlo creamos un directorio donde guardar nuestro docker-compose.yaml . mkdir -p ~/Sites/portainer cd ~/Sites/portainer Guardamos el siguiente fichero como docker-compose.yaml en nuestro directorio: version : '2' services : portainer : image : portainer/portainer command : -H unix:///var/run/docker.sock volumes : - /var/run/docker.sock:/var/run/docker.sock - portainer_data:/data ports : - 127.0.0.1:9000:9000 volumes : portainer_data : Y ejecutamos el contenedor: docker-compose up -d Limpieza \u00b6 Para borrar objetos que no est\u00e1n en uso: docker system prune Para borrar vol\u00famenes que no est\u00e1n asociados a ning\u00fan contenedor: docker volume rm $(docker volume ls -q -f \"dangling=true\") Para borrar contenedores que han terminado su ejecuci\u00f3n: docker rm $(docker ps -q -f \"status=exited\") Para borrar im\u00e1genes que no est\u00e1n etiquetadas: docker rmi $(docker images -q -f \"dangling=true\") Copias de seguridad \u00b6 Para hacer una copia de seguridad: docker run --rm -v /tmp:/backup \\ --volumes-from <container-name> \\ busybox tar -cvf /backup/backup.tar <path-to-data> Para restaurar: docker run --rm -v /tmp:/backup \\ --volumes-from <container-name> busybox tar -xvf /backup/backup.tar <path-to-data> Fuentes de esta p\u00e1gina: \u00b6 https://codefresh.io/docker-tutorial/everyday-hacks-docker/ http://blog.labianchin.me/2016/02/15/docker-tips-and-tricks Im\u00e1genes base \u00b6 Son las im\u00e1genes m\u00e1s conocidas por las que podemos usar para no partir desde cero para crear la nuestra. phusion/baseimage : 209mb centos : 200mb debian : 101mb ubuntu : 84mb alpine : 4.4mb busybox : 1.16mb","title":"Trucos"},{"location":"tips/#trucos","text":"","title":"Trucos"},{"location":"tips/#portainer","text":"Portainer es una gestor de contenedores a trav\u00e9s de una interfaz web. Para usarlo creamos un directorio donde guardar nuestro docker-compose.yaml . mkdir -p ~/Sites/portainer cd ~/Sites/portainer Guardamos el siguiente fichero como docker-compose.yaml en nuestro directorio: version : '2' services : portainer : image : portainer/portainer command : -H unix:///var/run/docker.sock volumes : - /var/run/docker.sock:/var/run/docker.sock - portainer_data:/data ports : - 127.0.0.1:9000:9000 volumes : portainer_data : Y ejecutamos el contenedor: docker-compose up -d","title":"Portainer"},{"location":"tips/#limpieza","text":"Para borrar objetos que no est\u00e1n en uso: docker system prune Para borrar vol\u00famenes que no est\u00e1n asociados a ning\u00fan contenedor: docker volume rm $(docker volume ls -q -f \"dangling=true\") Para borrar contenedores que han terminado su ejecuci\u00f3n: docker rm $(docker ps -q -f \"status=exited\") Para borrar im\u00e1genes que no est\u00e1n etiquetadas: docker rmi $(docker images -q -f \"dangling=true\")","title":"Limpieza"},{"location":"tips/#copias-de-seguridad","text":"Para hacer una copia de seguridad: docker run --rm -v /tmp:/backup \\ --volumes-from <container-name> \\ busybox tar -cvf /backup/backup.tar <path-to-data> Para restaurar: docker run --rm -v /tmp:/backup \\ --volumes-from <container-name> busybox tar -xvf /backup/backup.tar <path-to-data>","title":"Copias de seguridad"},{"location":"tips/#fuentes-de-esta-pagina","text":"https://codefresh.io/docker-tutorial/everyday-hacks-docker/ http://blog.labianchin.me/2016/02/15/docker-tips-and-tricks","title":"Fuentes de esta p\u00e1gina:"},{"location":"tips/#imagenes-base","text":"Son las im\u00e1genes m\u00e1s conocidas por las que podemos usar para no partir desde cero para crear la nuestra. phusion/baseimage : 209mb centos : 200mb debian : 101mb ubuntu : 84mb alpine : 4.4mb busybox : 1.16mb","title":"Im\u00e1genes base"},{"location":"wordpress/","text":"Levantar un WordPress con Docker \u00b6 Para crear un blog con WordPress necesitamos tener una base de datos d\u00f3nde almacenar las entradas. As\u00ed que empezaremos cre\u00e1ndola y despu\u00e9s crearemos el contenedor de nuestro blog . Crear un contenedor con MariaDB . \u00b6 WordPress soporta los motores relaciones MySQL y MariaDB . Usaremos este \u00faltimo. Crear el contenedor de MariaDB CREAR LA CARPETA wordpressdb en la raiz de C docker run -d --name wordpress-db --mount type=bind,source=C:/wordpressdb,target=/var/lib/mysql -e MYSQL_ROOT_PASSWORD=secret -e MYSQL_DATABASE=wordpress -e MYSQL_USER=manager -e MYSQL_PASSWORD=secret mariadb La imagen se descargar\u00e1, si no lo estaba ya, y se iniciar\u00e1 nuestro contenedor de _MariaDB El principal cambio en docker run con respecto a la \u00faltima vez es que no hemos usado -p (el par\u00e1metro para publicar puertos) y hemos a\u00f1adido el par\u00e1metro -d . Lo primero que habremos notado es que el contenedor ya no se queda en primer plano. El par\u00e1metro -d indica que debe ejecutarse como un proceso en segundo plano. As\u00ed no podremos pararlo por accidente con Control+C . Lo segundo es que vemos que el contenedor usa un puerto, el 3306/tcp , pero no est\u00e1 linkado a la m\u00e1quina anfitri\u00f3n. No tenemos forma de acceder a la base de datos directamente. Nuestra intenci\u00f3n es que solo el contenedor de WordPress pueda acceder. Luego una serie de par\u00e1metros -e que nos permite configurar nuestra base de datos. Info Los contenedores se configuran a trav\u00e9s de variables de ambiente, que podemos configurar con el par\u00e1metro -e que vemos en la orden anterior. Gracias a ellos hemos creado una base de datos, un usuario y configurado las contrase\u00f1as. Se recomienda buscar en el registro de Docker la imagen oficial de MariaDB para entender el uso de los par\u00e1metros. Por \u00faltimo, el par\u00e1metro --mount nos permite enlazar el volumen que creamos en el paso anterior con el directorio /var/lib/mysql del contenedor. Ese directorio es donde se guardan los datos de MariaDB . Eso significa que si borramos el contenedor, o actualizamos el contenedor a una nueva versi\u00f3n, no perderemos los datos porque ya no se encuentran en \u00e9l, si no en el volumen. Solo lo perder\u00edamos si borramos expl\u00edcitamente el volumen. Warning Cada contendor que usemos tendr\u00e1 uno o varios directorios donde se deben guardar los datos no vol\u00e1tiles. Nos corresponde a nosotros conocer la herramienta y saber de qu\u00e9 directorios se tratan. Usualmente est\u00e1n en la documentaci\u00f3n del contenedor, pero no siempre. Info El par\u00e1metro --mount se empez\u00f3 a utilizar desde la versi\u00f3n 17.06 para contenedores independientes (los que no pertenecen a un enjambre o swarm ). Los que conozcan Docker de versiones m\u00e1s antiguas estar\u00e1n m\u00e1s acostumbrados a usar el par\u00e1metro --volume que hace algo similar. Sin embargo la documentaci\u00f3n aconseja usar ya --mount , sobre todo para nuevos usuarios. Nosotros somos muy obedientes as\u00ed que en este taller usaremos --mount . Creando nuestro proyecto con WordPress \u00b6 Vamos a crear otra vez nuestro contenedor de WordPress , pero esta vez vamos a conectarlo con nuestra base de datos. Adem\u00e1s, queremos poder editar los ficheros de las plantillas, por si tenemos que modificar algo, as\u00ed que necesitaremos montar el directorio del contenedor donde est\u00e1 instalado WordPress con nuestra cuenta de usuario en la m\u00e1quina anfitri\u00f3n. Crear la carpeta en C Vamos a crear una carpeta en la raiz de C: Usar el explorador de windows y crearla con el nombre wordpress Crear el contenedor de Wordpress Y dentro de este directorio arrancamos el contenedor: docker run -d --name wordpress --link wordpress-db:mysql --mount type=bind,source=C:/wordpress,target=/var/www/html -e WORDPRESS_DB_USER=manager -e WORDPRESS_DB_PASSWORD=secret -p 8080:80 wordpress Este proceso descarga unos 200 mb aprox Cuando termine la ejecuci\u00f3n, si accedemos a la direcci\u00f3n http://localhost:8080/ , ahora s\u00ed podremos acabar el proceso de instalaci\u00f3n de nuestro WordPress. Podemos revisar el directorio c:/wordpress y ahi veremos el listado de todos los archivos de worpress. IMPORTANTE IMPORTANTE: Despues de la descarga de la imagen de Worpress cuando accedemos a la direcci\u00f3n http://localhost:8080/ puede que no les cargue de forma inmediata. Deben esperar que se inicien los servicios que requiere Worpress para trabajar. Instalacion de Wordpress \u00b6 Elegir el idioma: Espa\u00f1ol Titulo del sitio: Mi Sitio Web (Pueden cambiar al que deseen) Nombre de usuario: admin Contrase\u00f1a: Worpress genera una pero la pueden cambiar. Anotenla Correo electronico. Usen el educativo Visibilidad de los motores de busqueda. Activado Instalar WordPress Lo lograstes. Clic en Acceder y usaan el usuario INFO Detalles: Acceder a la ruta http://localhost:8080/ para revisar el sitio web.","title":"Levantar un WordPress con Docker"},{"location":"wordpress/#levantar-un-wordpress-con-docker","text":"Para crear un blog con WordPress necesitamos tener una base de datos d\u00f3nde almacenar las entradas. As\u00ed que empezaremos cre\u00e1ndola y despu\u00e9s crearemos el contenedor de nuestro blog .","title":"Levantar un WordPress con Docker"},{"location":"wordpress/#crear-un-contenedor-con-mariadb","text":"WordPress soporta los motores relaciones MySQL y MariaDB . Usaremos este \u00faltimo. Crear el contenedor de MariaDB CREAR LA CARPETA wordpressdb en la raiz de C docker run -d --name wordpress-db --mount type=bind,source=C:/wordpressdb,target=/var/lib/mysql -e MYSQL_ROOT_PASSWORD=secret -e MYSQL_DATABASE=wordpress -e MYSQL_USER=manager -e MYSQL_PASSWORD=secret mariadb La imagen se descargar\u00e1, si no lo estaba ya, y se iniciar\u00e1 nuestro contenedor de _MariaDB El principal cambio en docker run con respecto a la \u00faltima vez es que no hemos usado -p (el par\u00e1metro para publicar puertos) y hemos a\u00f1adido el par\u00e1metro -d . Lo primero que habremos notado es que el contenedor ya no se queda en primer plano. El par\u00e1metro -d indica que debe ejecutarse como un proceso en segundo plano. As\u00ed no podremos pararlo por accidente con Control+C . Lo segundo es que vemos que el contenedor usa un puerto, el 3306/tcp , pero no est\u00e1 linkado a la m\u00e1quina anfitri\u00f3n. No tenemos forma de acceder a la base de datos directamente. Nuestra intenci\u00f3n es que solo el contenedor de WordPress pueda acceder. Luego una serie de par\u00e1metros -e que nos permite configurar nuestra base de datos. Info Los contenedores se configuran a trav\u00e9s de variables de ambiente, que podemos configurar con el par\u00e1metro -e que vemos en la orden anterior. Gracias a ellos hemos creado una base de datos, un usuario y configurado las contrase\u00f1as. Se recomienda buscar en el registro de Docker la imagen oficial de MariaDB para entender el uso de los par\u00e1metros. Por \u00faltimo, el par\u00e1metro --mount nos permite enlazar el volumen que creamos en el paso anterior con el directorio /var/lib/mysql del contenedor. Ese directorio es donde se guardan los datos de MariaDB . Eso significa que si borramos el contenedor, o actualizamos el contenedor a una nueva versi\u00f3n, no perderemos los datos porque ya no se encuentran en \u00e9l, si no en el volumen. Solo lo perder\u00edamos si borramos expl\u00edcitamente el volumen. Warning Cada contendor que usemos tendr\u00e1 uno o varios directorios donde se deben guardar los datos no vol\u00e1tiles. Nos corresponde a nosotros conocer la herramienta y saber de qu\u00e9 directorios se tratan. Usualmente est\u00e1n en la documentaci\u00f3n del contenedor, pero no siempre. Info El par\u00e1metro --mount se empez\u00f3 a utilizar desde la versi\u00f3n 17.06 para contenedores independientes (los que no pertenecen a un enjambre o swarm ). Los que conozcan Docker de versiones m\u00e1s antiguas estar\u00e1n m\u00e1s acostumbrados a usar el par\u00e1metro --volume que hace algo similar. Sin embargo la documentaci\u00f3n aconseja usar ya --mount , sobre todo para nuevos usuarios. Nosotros somos muy obedientes as\u00ed que en este taller usaremos --mount .","title":"Crear un contenedor con MariaDB."},{"location":"wordpress/#creando-nuestro-proyecto-con-wordpress","text":"Vamos a crear otra vez nuestro contenedor de WordPress , pero esta vez vamos a conectarlo con nuestra base de datos. Adem\u00e1s, queremos poder editar los ficheros de las plantillas, por si tenemos que modificar algo, as\u00ed que necesitaremos montar el directorio del contenedor donde est\u00e1 instalado WordPress con nuestra cuenta de usuario en la m\u00e1quina anfitri\u00f3n. Crear la carpeta en C Vamos a crear una carpeta en la raiz de C: Usar el explorador de windows y crearla con el nombre wordpress Crear el contenedor de Wordpress Y dentro de este directorio arrancamos el contenedor: docker run -d --name wordpress --link wordpress-db:mysql --mount type=bind,source=C:/wordpress,target=/var/www/html -e WORDPRESS_DB_USER=manager -e WORDPRESS_DB_PASSWORD=secret -p 8080:80 wordpress Este proceso descarga unos 200 mb aprox Cuando termine la ejecuci\u00f3n, si accedemos a la direcci\u00f3n http://localhost:8080/ , ahora s\u00ed podremos acabar el proceso de instalaci\u00f3n de nuestro WordPress. Podemos revisar el directorio c:/wordpress y ahi veremos el listado de todos los archivos de worpress. IMPORTANTE IMPORTANTE: Despues de la descarga de la imagen de Worpress cuando accedemos a la direcci\u00f3n http://localhost:8080/ puede que no les cargue de forma inmediata. Deben esperar que se inicien los servicios que requiere Worpress para trabajar.","title":"Creando nuestro proyecto con WordPress"},{"location":"wordpress/#instalacion-de-wordpress","text":"Elegir el idioma: Espa\u00f1ol Titulo del sitio: Mi Sitio Web (Pueden cambiar al que deseen) Nombre de usuario: admin Contrase\u00f1a: Worpress genera una pero la pueden cambiar. Anotenla Correo electronico. Usen el educativo Visibilidad de los motores de busqueda. Activado Instalar WordPress Lo lograstes. Clic en Acceder y usaan el usuario INFO Detalles: Acceder a la ruta http://localhost:8080/ para revisar el sitio web.","title":"Instalacion de Wordpress"}]}